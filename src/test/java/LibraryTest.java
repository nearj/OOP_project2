/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import uos.gui.GUISystem;


import static org.junit.Assert.*;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Utilities;

import java.awt.*;
import java.awt.event.*;

public class LibraryTest {
	
    @Test public void testSomeLibraryMethod() {
    	
    	String test = "void Queue::EnQueue( int data ) {\n  if( Queue::isFull() )}asdfb {}{\n	arr[last] = data;\n	last = ( last + 1 ) % size;\n  } asb}"; 
    	Scanner scn = new Scanner(test);
    	scn.useDelimiter("(?<!\\{)\\}");
    	while(scn.hasNext())
    		System.out.println(scn.next() + "!!!");
    	
    	Scanner scn2 = new Scanner(test);
    	scn2.useDelimiter("}");
    	while(scn2.hasNext())
    		System.out.println(scn2.next() + "@@@");
    }
    
    public String trim( char[] value ) {
        int len = value.length;
        int st = 0;
        char[] val = value;    /* avoid getfield opcode */

        while ((st < len) && (val[st] <= ' ')) {
            st++;
        }
        return ((st > 0) || (len < value.length)) ? String.copyValueOf(value).substring(st, len) 
        		: String.copyValueOf(value);
    }
    
    private String toCleanClauses( String clauses) {
		char[] val = clauses.toCharArray();
		int st = 0;
		int ed = val.length - 1;
		
		outerloop:
		for( int i = st + 1; i < ed; i++ ) {
			if( val[i] == '\n' || val[i] == '\r' ) {
				for( int j = i + 1; j < ed; j++ ) {
					if( val[j] == '\n' || val[j] == '\r' ) {
						i = j - 1;
						break;
					}
					
					if( val[j] >= '!' ) {
						st = i;
						break outerloop;
					}
				}
			}
		}
		
		outerloop:
		for( int i = ed - 1; i > st; i-- ) {
			if( val[i] == '\n' || val[i] == '\r' ) {
				for( int j = i - 1; j > st; j-- ) {
					if( val[j] == '\n' || val[j] == '\r' ) {
						i = j + 1;
						break;
					}
					
					if( val[j] >= '!' ) {
						ed = i;
						break outerloop;
					}
				}
			}
		}
		
		return clauses.substring(st + 1, ed);
	}
	
}

